#!/bin/bash
#
# Copyright (C) 2004  Seznam.cz, a.s.
#
# $Id: make.sh 29 2011-01-20 13:10:22Z burlog $
#
# DESCRIPTION
# Packager for dbglog library.
#
# AUTHORS
# Vaclav Blazek <blazek@firma.seznam.cz>
#
# HISTORY
# 2006-02-13  (vasek)
#             Created.
#


########################################################################
# Command line options.                                                #
########################################################################
while [ "$#" != "0" ]; do
    case "$1" in
        --help)
            echo "Usage: make.sh [--debug] [--help]"
            echo "    --skip-build         skip building binaries, install and pack"
            echo "    --skip-install       skip building and installing binaries, just pack"
            echo "    --debug              log every command to stderr (set -x)"
            echo "    --help               show this help"
            echo ""
            echo "    To change package's version please edit file configure.in in upper"
            echo "    directory. Control file is generated by expanding @tags@ in the"
            echo "    libdbglog[-dev].control file."
            echo ""
            echo "    You can also create libdbglog[-dev].postinst, libdbglog[-dev].preinst,"
            echo "    libdbglog[-dev].conffiles, libdbglog[-dev].prerm and libdbglog[-dev].postrm files"
            echo "    that would be used as postinst, preinst, conffiles, prerm and postrm"
            echo "    files in the package."
            exit 0
        ;;

        --debug)
            DEBUG="debug"
        ;;

        --skip-build)
            SKIP_BUILD="yes"
        ;;

        --skip-install)
            SKIP_BUILD="yes"
            SKIP_INSTALL="yes"
        ;;

        # hidden parameter for recursive make.sh calling
        --make-binary)
            MODE="binary"
        ;;

        # hidden parameter for recursive make.sh calling
        --make-dev)
            MODE="dev"
        ;;

        *)
            echo "Unknown option '$1', try make.sh --help." >> /dev/stderr
            exit 1
        ;;
    esac
    shift
done

if test "$DEBUG" = "debug"; then
    set -x
fi

function make_dirs {
    # Compose package name
    dash=$(echo ${PROJECT_NAME} | grep -e'-')
    if [ "${dash}" = "" ]; then
        # libdbglog12-0
        PACKAGE_NAME=${PROJECT_NAME}${LIBRARY_VERSION}
    else
        # libdbglog12-0-dev
        name=$(echo ${PROJECT_NAME} | cut -f1 -d'-')
        suff=$(echo ${PROJECT_NAME} | cut -f2- -d'-')
        PACKAGE_NAME=${name}-${suff}
    fi

    # Create package destination directory.
    PACKAGE_DIR=pkg
    mkdir -p ${PACKAGE_DIR}

    # Create build directory (force it to be clean).
    BUILD_DIR=build
    mkdir -p ${BUILD_DIR}
    rm -Rf ${BUILD_DIR}

    # Create directories and set their attributes.
    DEBIAN_BASE=${BUILD_DIR}/${PACKAGE_NAME}
    CONTROL_DIR=${DEBIAN_BASE}/DEBIAN
    mkdir -p ${CONTROL_DIR}
    chmod 0755 ${CONTROL_DIR}
}

function replace_vars {
    sed -e "s/@VERSION@/${VERSION}/" \
        -e "s/@PACKAGE@/${PACKAGE_NAME}/" \
        -e "s/@MAINTAINER@/${MAINTAINER}/" \
        -e "s/@ARCHITECTURE@/$(dpkg --print-architecture)/" \
        -e "s/@SIZE@/${SIZE}/" \
        -e "s/@STANDARD_DEPEND@/${STANDARD_DEPEND}/" \
        -e "s/@EXTRA_DEPEND@/${EXTRA_DEPEND}/" \
        -e "s/@SH_DEPEND@/${SH_DEPEND}/" \
        -e "s/@SO_VERSION@/${LIBRARY_VERSION}/" \
        $1 > $2
}

function build_package {
    ########################################################################
    # Package housekeeping                                                 #
    ########################################################################

    # Copy extra package files -- runnable
    for FILE in postinst preinst prerm postrm; do
        if test -f ${PROJECT_NAME}.${FILE}; then
            cp ${PROJECT_NAME}.${FILE} ${CONTROL_DIR}/${FILE}
            chmod 755 ${CONTROL_DIR}/${FILE}
        fi
    done

    # Copy unrunnable files
    test -f ${PROJECT_NAME}.conffiles \
            && cp ${PROJECT_NAME}.conffiles ${CONTROL_DIR}/conffiles

    # Remove any lost CVS entries in the package tree.
    find ${DEBIAN_BASE} -path "*CVS*" -exec rm -Rf '{}' \;

    # Compute package's size.
    SIZEDU=$(du -sk ${DEBIAN_BASE} | awk '{print $1}')
    SIZEDIR=$(find ${DEBIAN_BASE} -type d | wc | awk '{print $1}')
    SIZE=$[ $SIZEDU - $SIZEDIR ]

    VERSION=$(< ../version)

    # Process control file -- all @tags@ will be replaced with
    # appropriate data.
    replace_vars ${PROJECT_NAME}.control ${CONTROL_DIR}/control

    # Process shlibs file
    test -f ${PROJECT_NAME}.shlibs && \
        replace_vars ${PROJECT_NAME}.shlibs ${CONTROL_DIR}/shlibs

    # Create and rename the package.
    dpkg --build ${DEBIAN_BASE} ${PACKAGE_DIR}/${PACKAGE_NAME}.deb
    dpkg-name -o ${PACKAGE_DIR}/${PACKAGE_NAME}.deb

    # Get rid of temporary build directory.
    rm -r ${BUILD_DIR}
}

function buildDepends() {

    function listPackages() {
        (
            for a in `ldd "$1" | cut -f 2- -d"/" | cut -f 1 -d"("`; do
                echo "$(dpkg -S "`readlink -f "/$a"`" | cut -f 1 -d:)"
            done
        ) | sort -u
    }

    function depends() {
        (
            for a in `listPackages $1`; do
                if [ -f "/var/lib/dpkg/info/$a.shlibs" ]; then
                    cat "/var/lib/dpkg/info/$a.shlibs" | grep -v "^[^:]*: " | grep " $a " \
                        | cut -f 3- -d" " | sed "s/\(.*\)/\1, /g"
                fi
            done
        ) | sort -u
    }

    depends $1 | tr -d "\n" | sed "s/,\s*$//g"
    echo
}


# determine operation
if [ "${MODE}" = "binary" ]; then
    # we are making 'bin' package -- called recursively from make.sh
    # Make all directories
    make_dirs

    ########################################################################
    # Copy all files                                                       #
    ########################################################################

    # lib files
    mkdir -p ${DEBIAN_BASE}/usr/lib
    cp -vd ${INSTALL_DIR}/usr/lib/*.so.* ${DEBIAN_BASE}/usr/lib

    # info files (documentation)
    ################ temporarily disabled because its build is broken
    #mkdir -p ${DEBIAN_BASE}/usr/share/info
    #cp -vR ${INSTALL_DIR}/usr/share/info ${DEBIAN_BASE}/usr/share

    # build extra depend
    if grep -q "use Dpkg::Control" "`which dpkg-shlibdeps`" ; then
        SH_DEPEND=$(buildDepends ${INSTALL_DIR}/usr/lib/libdbglog.so)
    else
        SH_DEPEND=$(dpkg-shlibdeps -O ${INSTALL_DIR}/usr/lib/libdbglog.so | \
            gawk '{match($0, /^.*Depends=(.*)$/, a); print a[1]}')
    fi

    # Build the package
    build_package
    exit $?

elif [ "${MODE}" = "dev" ]; then
    # we are making 'dev' package -- called recursively from make.sh
    BINARY_PROJECT_NAME=${PROJECT_NAME}${LIBRARY_VERSION}
    PROJECT_NAME=${PROJECT_NAME}-dev

    # Make all directories
    make_dirs

    ########################################################################
    # Copy all files                                                       #
    ########################################################################

    # headers
    mkdir -p ${DEBIAN_BASE}/usr/include
    cp -vrd ${INSTALL_DIR}/usr/include/* ${DEBIAN_BASE}/usr/include

    # lib files
    mkdir -p ${DEBIAN_BASE}/usr/lib
    cp -vd ${INSTALL_DIR}/usr/lib/*.a ${DEBIAN_BASE}/usr/lib
    cp -vd ${INSTALL_DIR}/usr/lib/*.la ${DEBIAN_BASE}/usr/lib
    cp -vd ${INSTALL_DIR}/usr/lib/*.so ${DEBIAN_BASE}/usr/lib

    mkdir -p ${DEBIAN_BASE}/usr/lib/pkgconfig
    cp -vd ${INSTALL_DIR}/usr/lib/pkgconfig/*.pc \
           ${DEBIAN_BASE}/usr/lib/pkgconfig

    # compatibility hack for older programs which links against -ldbglog-so
    ln -s /usr/lib/libdbglog.so ${DEBIAN_BASE}/usr/lib/libdbglog-so.so

    # Compose extra dependencies: we must depend on libdbglog library with
    # exactly same version.
    VERSION=$(< ../version)
    EXTRA_DEPEND="${BINARY_PROJECT_NAME} (= ${VERSION})"

    # Build the package
    build_package
    exit $?
fi

# Installation

########################################################################
# Build and install.                                                   #
########################################################################

# project name
PROJECT_NAME="libdbglog"

# Maintainer of this module
MAINTAINER="Michal Bukovsky <michal.bukovsky@firma.seznam.cz>"

# Create install directory.
INSTALL_DIR=$(pwd)/"install"
rm -Rf ${INSTALL_DIR}
mkdir -p ${INSTALL_DIR}

# Build.
if test -z "${SKIP_BUILD}"; then
    (
        # Try to determine number of processors => we will tell make to run
        # same number of jobs in parallel.
        # This is appropriate only for linux. If you know how to determine number
        # of processor on your platform do no hassitate :-)
        PROCESSORS=$( (cat /proc/cpuinfo || echo processor) \
                | grep ^processor | wc -l)

        # go to the project root
        cd ..

        # configure sources -- we want to instal under /usr
        # info goes to share dir
        ./configure --prefix=/usr --infodir=/usr/share/info
        # clean any previously created files
        make clean
        # make libdbglog
        make -j ${PROCESSORS} all
    )
fi

# Install to temporary directory.
if test -z "${SKIP_INSTALL}"; then
    (
        cd ..
        # install libdbglog to the install-dir
        make DESTDIR=${INSTALL_DIR} install
    )
fi

########################################################################
# Call packagers to create both binary an dev packages.                #
########################################################################

# Variables INSTALL_DIR and LIBRARY_VERSION must be exported for propper
# operation of packages.

# Determine library version -- we generate libdbglog<LIBRARY_VERSION>
# and libdbglog<LIBRARY_VERSION>-dev packages.
LIBRARY_VERSION=$(sed -n -e 's/current=\(.*\)/\1/p' \
        ${INSTALL_DIR}/usr/lib/libdbglog.la) || exit -1
LIBRARY_AGE=$(sed -n -e 's/age=\(.*\)/\1/p' \
        ${INSTALL_DIR}/usr/lib/libdbglog.la) || exit -1
export LIBRARY_VERSION=$(($LIBRARY_VERSION - $LIBRARY_AGE))

export PROJECT_NAME
export MAINTAINER
export INSTALL_DIR
export DEBUG

# Create binary package (must be run under fakeroot).
fakeroot ./make.sh --make-binary

# Create dev package (must be run under fakeroot).
fakeroot ./make.sh --make-dev

# Get rid of residuals
rm -Rf ${INSTALL_DIR}
