/*
 * Codegen/CType/CStruct.h
 * This file is generated from the following haskell datatype representation:
 * 
 * data CType = 
    CInteger { bitsize :: Size, signedness :: LLVMSignedness } |
    CFloat { bitsize:: Size } |
    CPointer { element :: Param CTypeRef } |
    CAlias { original :: Param CTypeRef, qualifier :: Exact CQualifier } |
    CArray { element :: Param CTypeRef, size :: Maybe Size } |
    CStruct { elements :: [Exact CStructMember] } |
    CFunction { resultType :: Param CTypeRef, argumentTypes :: [Param CTypeRef] }
      deriving (Show, Eq, Data, Typeable)

 * 
 * stored in Codegen/CType/CType.datatype
 * using the template file Codegen/CType/derived.h.hst
 * 
 * DO NOT EDIT THIS FILE DIRECTLY
 */

#ifndef CSTRUCT_H
#define CSTRUCT_H

#include "Codegen/CType/CType.h"
#include "Codegen/CType/CTypeRef.h"
#include "Codegen/CType/CStructMember.h"

#include <vector>

namespace borealis {

class CStruct : public CType {

    typedef CStruct Self;
    typedef CType Base;

    CStruct(const std::string& name, const std::vector<CStructMember>& elements): CType(class_tag(*this), name), elements(elements) {}

public:

    static bool classof(const Self*) { return true; }
    static bool classof(const Base* b) { return b->getClassTag() == class_tag<Self>(); }

private:
    std::vector<CStructMember> elements;

public:
    const std::vector<CStructMember>& getElements() const { return this->elements; }

};

} // namespace borealis

#endif // CSTRUCT_H
