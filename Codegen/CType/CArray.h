/*
 * Codegen/CType/CArray.h
 * This file is generated from the following haskell datatype representation:
 * 
 * data CType =
    CVoid |
    CInteger { bitsize :: Size, signedness :: LLVMSignedness } |
    CFloat { bitsize:: Size } |
    CPointer { element :: Param CTypeRef } |
    CAlias { original :: Param CTypeRef, qualifier :: Exact CQualifier } |
    CArray { element :: Param CTypeRef, size :: Maybe Size } |
    CStruct { elements :: [Exact CStructMember], opaque :: Bool } |
    CFunction { resultType :: Param CTypeRef, argumentTypes :: [Param CTypeRef] }
      deriving (Show, Eq, Data, Typeable)

 * 
 * stored in Codegen/CType/CType.datatype
 * using the template file Codegen/CType/derived.h.hst
 * 
 * DO NOT EDIT THIS FILE DIRECTLY
 */

#ifndef CARRAY_H
#define CARRAY_H

#include "Util/util.hpp"

#include "Codegen/CType/CType.h"
#include "Codegen/CType/CTypeRef.h"
#include "Codegen/CType/CStructMember.h"

#include "Util/option.hpp"
#include <cstddef>

namespace borealis {

class CTypeFactory;

class CArray : public CType {

    typedef CArray Self;
    typedef CType Base;

    CArray(const std::string& name, const CTypeRef& element, const borealis::util::option<size_t>& size): CType(class_tag(*this), name), element(element), size(size) {}

public:

    friend class ::borealis::CTypeFactory;
    friend class util::enable_special_make_shared<CArray, CTypeFactory>; // enable factory-construction only

    static bool classof(const Self*) { return true; }
    static bool classof(const Base* b) { return b->getClassTag() == class_tag<Self>(); }

private:
    CTypeRef element;
    borealis::util::option<size_t> size;

public:
    const CTypeRef& getElement() const { return this->element; }
    const borealis::util::option<size_t>& getSize() const { return this->size; }

};

} // namespace borealis

#endif // CARRAY_H
