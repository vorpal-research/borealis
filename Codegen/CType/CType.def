/*
 * Codegen/CType/CType.def
 * This file is generated from the following haskell datatype representation:
 * 
 * data CType =
    CVoid |
    CInteger { bitsize :: Size, signedness :: LLVMSignedness } |
    CFloat { bitsize:: Size } |
    CPointer { element :: Param CTypeRef } |
    CAlias { original :: Param CTypeRef, qualifier :: Exact CQualifier } |
    CArray { element :: Param CTypeRef, size :: Maybe Size } |
    CStruct { elements :: [Exact CStructMember], opaque :: Bool } |
    CFunction { resultType :: Param CTypeRef, argumentTypes :: [Param CTypeRef] }
      deriving (Show, Eq, Data, Typeable)

 * 
 * stored in Codegen/CType/CType.datatype
 * using the template file Codegen/CType/base.def.hst
 * 
 * DO NOT EDIT THIS FILE DIRECTLY
 */

#ifndef HANDLE_TYPE
#define INCLUDE_MODE
#endif

#ifdef INCLUDE_MODE
#undef INCLUDE_MODE

#include "Codegen/CType/CVoid.h"
#include "Codegen/CType/CInteger.h"
#include "Codegen/CType/CFloat.h"
#include "Codegen/CType/CPointer.h"
#include "Codegen/CType/CAlias.h"
#include "Codegen/CType/CArray.h"
#include "Codegen/CType/CStruct.h"
#include "Codegen/CType/CFunction.h"

#define HANDLE_TYPE(NAME, CLASS)

#endif

HANDLE_TYPE(CVoid, CVoid)
HANDLE_TYPE(CInteger, CInteger)
HANDLE_TYPE(CFloat, CFloat)
HANDLE_TYPE(CPointer, CPointer)
HANDLE_TYPE(CAlias, CAlias)
HANDLE_TYPE(CArray, CArray)
HANDLE_TYPE(CStruct, CStruct)
HANDLE_TYPE(CFunction, CFunction)

#ifdef HANDLE_TYPE
#undef HANDLE_TYPE
#endif