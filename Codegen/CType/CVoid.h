/*
 * Codegen/CType/CVoid.h
 * This file is generated from the following haskell datatype representation:
 * 
 * data CType =
    CVoid |
    CInteger { bitsize :: Size, signedness :: LLVMSignedness } |
    CFloat { bitsize:: Size } |
    CPointer { element :: Param CTypeRef } |
    CAlias { original :: Param CTypeRef, qualifier :: Exact CQualifier } |
    CArray { element :: Param CTypeRef, size :: Maybe Size } |
    CStruct { elements :: [Exact CStructMember], opaque :: Bool } |
    CFunction { resultType :: Param CTypeRef, argumentTypes :: [Param CTypeRef] }
      deriving (Show, Eq, Data, Typeable)

 * 
 * stored in Codegen/CType/CType.datatype
 * using the template file Codegen/CType/derived.h.hst
 * 
 * DO NOT EDIT THIS FILE DIRECTLY
 */

#ifndef CVOID_H
#define CVOID_H

#include "Util/util.hpp"

#include "Codegen/CType/CType.h"
#include "Codegen/CType/CTypeRef.h"
#include "Codegen/CType/CStructMember.h"



namespace borealis {

class CTypeFactory;

/** protobuf -> Codegen/CType/CVoid.proto
import "Codegen/CType/CType.proto";
import "Codegen/CType/CStructMember.proto";
import "Codegen/CType/CQualifier.proto";
import "Codegen/CType/CTypeRef.proto";



package borealis.proto;

message CVoid {
    extend borealis.proto.CType {
        optional CVoid ext = $COUNTER_CTYPE;
    }


}

**/

class CVoid : public CType {

    typedef CVoid Self;
    typedef CType Base;

    CVoid(const std::string& name): CType(class_tag(*this), name) {}

public:

    friend class ::borealis::CTypeFactory;
    friend class util::enable_special_make_shared<CVoid, CTypeFactory>; // enable factory-construction only

    static bool classof(const Self*) { return true; }
    static bool classof(const Base* b) { return b->getClassTag() == class_tag<Self>(); }

};

} // namespace borealis

#endif // CVOID_H
