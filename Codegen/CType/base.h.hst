/*
 * $output_file$
 * This file is generated from the following haskell datatype representation:
 * 
 * $source_expr$
 * 
 * stored in $source_file$
 * using the template file $template_file$
 * 
 * DO NOT EDIT THIS FILE DIRECTLY
 */

#ifndef $cpp.guard$
#define $cpp.guard$

#include <memory>
#include <string>

#include "Util/typeindex.hpp"

namespace borealis {

class $basename$ : public ClassTag {
    std::string name;

protected:
    $basename$(const $basename$&) = default;
    
public:
    $basename$(id_t id, const std::string& name) : ClassTag(id), name(name) {};

    typedef std::shared_ptr<const $basename$> Ptr;
    typedef std::unique_ptr<proto::$basename$> ProtoPtr;

    const std::string& getName() const { return name; }
};

} // namespace borealis

namespace std {
template<>
struct hash<borealis::$basename$::Ptr> {
    size_t operator()(const borealis::$basename$::Ptr& t) const {
        return reinterpret_cast<size_t>(t.get());
    }
};
template<>
struct hash<const borealis::$basename$::Ptr> {
    size_t operator()(const borealis::$basename$::Ptr& t) const {
        return reinterpret_cast<size_t>(t.get());
    }
};
} // namespace std

#endif //$cpp.guard$"
