/*
 * Type/Type.def
 * This file is generated from the following haskell datatype representation:
 * 
 * data Type = 
    Integer { bitsize :: UInt, signedness :: LLVMSignedness } |
    Bool |
    Float |
    UnknownType |
    Pointer { pointed :: Type, memspace :: Size } |
    Array { element :: Type, size :: Maybe Size } |
    Record { name :: String, body :: RecordBodyRef } |
    TypeError { message :: String } |
    Function { retty :: Type, args :: [Type] }
      deriving (Show, Eq, Data, Typeable)

 * 
 * stored in Type/Type.datatype
 * using the template file Type/base.def.hst
 * 
 * DO NOT EDIT THIS FILE DIRECTLY
 */

#ifndef HANDLE_TYPE
#define INCLUDE_MODE
#endif

#ifdef INCLUDE_MODE
#undef INCLUDE_MODE

#include "Type/Integer.h"
#include "Type/Bool.h"
#include "Type/Float.h"
#include "Type/UnknownType.h"
#include "Type/Pointer.h"
#include "Type/Array.h"
#include "Type/Record.h"
#include "Type/TypeError.h"
#include "Type/Function.h"

#define HANDLE_TYPE(NAME, CLASS)

#endif

HANDLE_TYPE(Integer, Integer)
HANDLE_TYPE(Bool, Bool)
HANDLE_TYPE(Float, Float)
HANDLE_TYPE(UnknownType, UnknownType)
HANDLE_TYPE(Pointer, Pointer)
HANDLE_TYPE(Array, Array)
HANDLE_TYPE(Record, Record)
HANDLE_TYPE(TypeError, TypeError)
HANDLE_TYPE(Function, Function)

#ifdef HANDLE_TYPE
#undef HANDLE_TYPE
#endif